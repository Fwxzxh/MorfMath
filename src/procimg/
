package procimg;

import java.util.Random;

public class Matrix {
  public static void main(String[] args) {
    // Crear una matriz random de 10 x 10 y hacer el procedimiento con ella
    Operaciones op = new Operaciones();
    op.construyeMatrix();
    op.despliegaMatrix();
    System.out.println("================");
    op.procesaMatrix();
    op.despliegaNMatrix();
  }

  static class Operaciones {
    int n = 5;
    int Matrix[][] = new int[n][n];
    int NewMatrix[][] = new int[n][n];
    Random ran = new Random();
    int valorRGB() {
      int r = ran.nextInt(11);
      int g = ran.nextInt(11);
      int b = ran.nextInt(11);
      int rgb = (r + g + b) / 3;
      return rgb;
    }

    void construyeMatrix() {
      for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
          Matrix[i][j] = valorRGB();
        }
      }
    }

    void despliegaMatrix() {
      for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
          System.out.print(Matrix[i][j] + " ");
        }
        System.out.println("");
      }
    }

    int mayorMatrix(int valores[]) {
      int mayor = valores[0];
      for (int x = 0; x < valores.length; x++) {
        if (valores[x] > mayor) {
          mayor = valores[x];
        }
      }
      return mayor;
    }

    void procesaMatrix() {
      for (int i = 0; i < n; i++) {   // i=x
        for (int j = 0; j < n; j++) { // j=y
          if (i == 0 || j == 0 || i == n - 1 || j == n - 1) {

            if (i == n - 1) {   // esquinas inf y borde inf
              if (j == n - 1) { // esquina inf der
                NewMatrix[i][j] = 11;
              }
              if (j == 0) { // esquina inf izq
                NewMatrix[i][j] = 22;

            int[] valores = new int[] {
 Matrix[i - 1][j], Matrix[i - 1][j + 1],
 Matrix[i][j],     Matrix[i][j + 1]};
                  NewMatrix[i][j] = mayorMatrix(valores);
              } else { // el punto esta en el borde inferior
                if (j != n - 1) {
                  int[] valores =
                      new int[] {Matrix[i - 1][j - 1], Matrix[i - 1][j],
                                 Matrix[i - 1][j + 1], Matrix[i][j - 1],
                                 Matrix[i][j],         Matrix[i][j + 1]};
                  NewMatrix[i][j] = mayorMatrix(valores);
                }
              }
            }

            if (i == 0) {   // esquinas sup y borde sup
              if (j == 0) { // esquina sup izq
                int[] valores =
                    new int[] {Matrix[i][j], Matrix[i][j + 1], Matrix[i + 1][j],
                               Matrix[i + 1][j + 1]};
                NewMatrix[i][j] = mayorMatrix(valores);
              }
              if (j == n - 1) { // esquina superior derecha
                int[] valores =
                    new int[] {Matrix[i][j - 1], Matrix[i][j],
                               Matrix[i + 1][j - 1], Matrix[i + 1][j]};
                NewMatrix[i][j] = mayorMatrix(valores);
              } else { // el punto esta solo en el borde superior
                if (j != 0) {
                  int[] valores =
                      new int[] {Matrix[i][j - 1], Matrix[i][j],
                                 Matrix[i][j + 1], Matrix[i + 1][j - 1],
                                 Matrix[i + 1][j], Matrix[i + 1][j + 1]};
                  NewMatrix[i][j] = mayorMatrix(valores);
                }
              }
            }

            if (j == n - 1) { // el valor esta en el borde der
              if (i != 0 && i != n - 1) {
                int[] valores =
                    new int[] {Matrix[i - 1][j - 1], Matrix[i - 1][j],
                               Matrix[i][j - 1],     Matrix[i][j],
                               Matrix[i + 1][j - 1], Matrix[i + 1][j]};
                NewMatrix[i][j] = mayorMatrix(valores);
              }
            }
            if (j == 0) { // el punto esta en el borde izq
              if (i != 0 && i != n - 1) {
                int[] valores =
                    new int[] {Matrix[i - 1][j], Matrix[i - 1][j + 1],
                               Matrix[i][j],     Matrix[i][j + 1],
                               Matrix[i + 1][j], Matrix[i + 1][j + 1]};
                NewMatrix[i][j] = mayorMatrix(valores);
              }
            }

          } else {
            int[] valores = new int[] {
                Matrix[i - 1][j - 1], Matrix[i - 1][j], Matrix[i - 1][j + 1],
                Matrix[i][j - 1],     Matrix[i][j],     Matrix[i][j + 1],
                Matrix[i + 1][j - 1], Matrix[i + 1][j], Matrix[i + 1][j + 1]};
            NewMatrix[i][j] = mayorMatrix(valores);
          }
        }
      }
    }
    void despliegaNMatrix() {
      for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
          System.out.print(NewMatrix[i][j] + " ");
        }
        System.out.println("");
      }
    }
  }
}
